// Generated by CoffeeScript 1.3.3
var colorMulti, colorsAdd, filter, getPixel, onmessage, setPixel;

getPixel = function(imageData, x, y) {
  var i, key, obj, val, _ref;
  obj = {};
  i = (y * imageData.width + x) * 4;
  _ref = ["r", "g", "b", "a"];
  for (key in _ref) {
    val = _ref[key];
    obj[val] = imageData.data[i + parseInt(key)];
  }
  return obj;
};

setPixel = function(imageData, x, y, color) {
  var clip, i, key, val, _ref, _results;
  i = (y * imageData.width + x) * 4;
  clip = function(val) {
    return Math.min(Math.max(val, 0), 255);
  };
  _ref = ["r", "g", "b", "a"];
  _results = [];
  for (key in _ref) {
    val = _ref[key];
    _results.push(imageData.data[i + parseInt(key)] = clip(color[val]));
  }
  return _results;
};

colorMulti = function(color, val) {
  color.r *= val;
  color.g *= val;
  return color.b *= val;
};

colorsAdd = function(colorA, colorB) {
  colorA.r += colorB.r;
  colorA.g += colorB.g;
  colorA.b += colorB.b;
  return colorA.a = 255;
};

filter = function(imageData, filterData, matrix) {
  var color, mx, my, nearColor, x, y, _i, _ref, _results;
  _results = [];
  for (y = _i = 0, _ref = imageData.height; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
    _results.push((function() {
      var _j, _k, _l, _ref1, _results1;
      _results1 = [];
      for (x = _j = 0, _ref1 = imageData.width; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        color = {
          r: 0,
          g: 0,
          b: 0,
          a: 0
        };
        for (my = _k = 0; _k <= 2; my = ++_k) {
          for (mx = _l = 0; _l <= 2; mx = ++_l) {
            nearColor = getPixel(imageData, x + mx - 1, y + my - 1);
            colorMulti(nearColor, matrix[my][mx]);
            colorsAdd(color, nearColor);
          }
        }
        _results1.push(setPixel(filterData, x, y, color));
      }
      return _results1;
    })());
  }
  return _results;
};

onmessage = function(event) {
  filter(event.data.imageData, event.data.filterData, event.data.matrix);
  return postMessage(event.data.filterData);
};
